from create_bot import dp
from aiogram import types
import keyboard as kb
from create_bot import bot
from database import sql_data as sq


@dp.message_handler(commands='start')
async def send_welcome(m: types.Message):
    user_id = m.from_user.id
    sq.check_user(user_id)
    await m.reply(f'<strong>–ó–¥–∞—Ä–æ–≤–∞, —è - –õ–µ—Ö–∞.</strong>\n\n'
                  f'–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø—Ä–æ—Å–ø–∞—Ç—å –ø–∞—Ä—É... :)\n\n'
                  f'–¢–∞–∫, –æ —á–µ–º —ç—Ç–æ —è... –í –æ–±—â–µ–º, '
                  f'—è <i>—É–º–µ—é –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–∏—Ö –ø–∞—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–æ–±–æ–π –≥—Ä–∞—Ñ–∏–∫—É.</i>\n\n'
                  f'üëáüèª–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –¥–∞–≤–∞–π —É–∂–µ —Ç–∞–º —Å–æ–≥–ª–∞—Å—É–µ–º, –∫–æ–≥–¥–∞ –∏ —á–µ–≥–æ...üëáüèª'
                  , reply_markup=kb.timechoose_kb, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text='time')
async def time_choose(c: types.CallbackQuery):
    await c.answer('‚è∞–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫')
    await c.message.answer('<strong>üëáüèª–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ãüëáüèª</strong>',
                           reply_markup=kb.timekb_markup, parse_mode=types.ParseMode.HTML)
    await c.answer()
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)


# @dp.callback_query_handler(text='user_time')
# async def user_time(c : types.CallbackQuery):
#     user_id = c.from_user.id
#     await c.message.answer('<strong>üëáüèª–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –í–∞–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MMüëáüèª</strong>',
#                            parse_mode=types.ParseMode.HTML)
#     await c.message
#     notify_time = c
#     sq.update_time(user_id, notify_time)

@dp.callback_query_handler(text='5:00AM')
async def time_5(c: types.CallbackQuery):
    user_id = c.from_user.id
    notify_time = '5:00'
    db_time = notify_time#.replace(notify_time[1], '')
    sq.update_time(user_id, db_time)
    await bot.send_message(c.from_user.id,
                           f'<strong>–£–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {notify_time}.</strong> –Ø –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?'
                           f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é',
                           parse_mode=types.ParseMode.HTML, reply_markup=kb.main_menu)
    if sq.check_time_is_not_null(user_id, db_time) == True:
        await c.answer('‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)
@dp.callback_query_handler(text='6:00AM')
async def time_5(c: types.CallbackQuery):
    user_id = c.from_user.id
    notify_time = '6:00'
    db_time = notify_time#.replace(notify_time[1], '')
    sq.update_time(user_id, db_time)
    await bot.send_message(c.from_user.id,
                           f'<strong>–£–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {notify_time}.</strong> –Ø –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?'
                           f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é',
                           parse_mode=types.ParseMode.HTML, reply_markup=kb.main_menu)
    if sq.check_time_is_not_null(user_id, db_time) == True:
        await c.answer('‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)
@dp.callback_query_handler(text='7:00AM')
async def time_5(c: types.CallbackQuery):
    user_id = c.from_user.id
    notify_time = '7:00'
    db_time = notify_time#.replace(notify_time[1], '')
    sq.update_time(user_id, db_time)
    await bot.send_message(c.from_user.id,
                           f'<strong>–£–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {notify_time}.</strong> –Ø –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?'
                           f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é',
                           parse_mode=types.ParseMode.HTML, reply_markup=kb.main_menu)
    if sq.check_time_is_not_null(user_id, db_time) == True:
        await c.answer('‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)
@dp.callback_query_handler(text='8:00AM')
async def time_5(c: types.CallbackQuery):
    user_id = c.from_user.id
    notify_time = '8:00'
    db_time = notify_time#.replace(notify_time[1], '')
    sq.update_time(user_id, db_time)
    await bot.send_message(c.from_user.id,
                           f'<strong>–£–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {notify_time}.</strong> –Ø –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?'
                           f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é',
                           parse_mode=types.ParseMode.HTML, reply_markup=kb.main_menu)
    if sq.check_time_is_not_null(user_id, db_time) == True:
        await c.answer('‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)
@dp.callback_query_handler(text='9:00AM')
async def time_5(c: types.CallbackQuery):
    user_id = c.from_user.id
    notify_time = '9:00'
    db_time = notify_time#.replace(notify_time[1], '')
    sq.update_time(user_id, db_time)
    await bot.send_message(c.from_user.id,
                           f'<strong>–£–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {notify_time}.</strong> –Ø –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?'
                           f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é',
                           parse_mode=types.ParseMode.HTML, reply_markup=kb.main_menu)
    if sq.check_time_is_not_null(user_id, db_time) == True:
        await c.answer('‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)
@dp.callback_query_handler(text='10:00AM')
async def time_5(c: types.CallbackQuery):
    user_id = c.from_user.id
    notify_time = '10:00'
    db_time = notify_time#.replace(notify_time[1], ''))
    sq.update_time(user_id, db_time)
    await bot.send_message(c.from_user.id,
                           f'<strong>–£–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {notify_time}.</strong> –Ø –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?'
                           f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é',
                           parse_mode=types.ParseMode.HTML, reply_markup=kb.main_menu)
    if sq.check_time_is_not_null(user_id, db_time) == True:
        await c.answer('‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await bot.delete_message(chat_id=c.from_user.id, message_id=c.message.message_id)

@dp.message_handler(text='üì≥üï∞–°–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏')
async def change_notify_time(m : types.Message):
    await m.answer('<strong>üëáüèª–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ãüëáüèª</strong>',
                           reply_markup=kb.timekb_markup, parse_mode=types.ParseMode.HTML)
    await bot.delete_message(chat_id=m.from_user.id, message_id=m.message_id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–Ω—É–∂–Ω–∞ excel —Ç–∞–±–ª–∏—Ü–∞)
@dp.message_handler(text='üóí–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def check_timetable(m : types.Message):
    pass

# –ë—É–¥–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω—É–∂–Ω–∞ –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –ª–∏–±–æ –ø—Ä–∏–¥–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å –º–∏–ª–ª–∏–∞—Ä–¥ –∫–Ω–æ–ø–æ–∫ :(
@dp.message_handler(text='üèõ–ù–∞–π—Ç–∏ –∫–æ—Ä–ø—É—Å')
async def find_building(m : types.Message):
    pass







def register_handler(dp: dp):
    dp.message_handler(commands=['start'])
